import React, { useState } from 'react';
import { Clock, Plus, Trash2, Edit2, ChevronRight, ChevronDown, FileText, Move, ArrowUp, ArrowDown, Search, Calendar, AlertCircle, Circle, Minus } from 'lucide-react';

const HierarchicalTaskManager = () => {
  const [workspaces, setWorkspaces] = useState({
    'workspace1': { name: '業務フロー1', tasks: [] },
    'workspace2': { name: '業務フロー2', tasks: [] },
    'workspace3': { name: 'プロジェクトA', tasks: [] },
    'workspace4': { name: '個人タスク', tasks: [] },
    'workspace5': { name: 'その他', tasks: [] }
  });
  const [currentWorkspace, setCurrentWorkspace] = useState('workspace1');
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingTask, setEditingTask] = useState(null);
  const [fontSize, setFontSize] = useState('medium');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterColor, setFilterColor] = useState('all');
  const [filterPriority, setFilterPriority] = useState('all');
  const [sortByPriority, setSortByPriority] = useState(false);

  // 現在のワークスペースのタスクを更新する関数
  const setTasks = (newTasks) => {
    setWorkspaces(prev => ({
      ...prev,
      [currentWorkspace]: {
        ...prev[currentWorkspace],
        tasks: typeof newTasks === 'function' ? newTasks(prev[currentWorkspace].tasks) : newTasks
      }
    }));
  };

  // 現在のワークスペースのタスクを取得
  const tasks = workspaces[currentWorkspace]?.tasks || [];

  const fontSizes = {
    small: { task: 'text-sm', meta: 'text-xs', content: 'text-sm' },
    medium: { task: 'text-base', meta: 'text-sm', content: 'text-sm' },
    large: { task: 'text-lg', meta: 'text-base', content: 'text-base' },
  };

  const colors = {
    blue: { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-800', hover: 'hover:bg-blue-100' },
    green: { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-800', hover: 'hover:bg-green-100' },
    purple: { bg: 'bg-purple-50', border: 'border-purple-200', text: 'text-purple-800', hover: 'hover:bg-purple-100' },
    pink: { bg: 'bg-pink-50', border: 'border-pink-200', text: 'text-pink-800', hover: 'hover:bg-pink-100' },
    orange: { bg: 'bg-orange-50', border: 'border-orange-200', text: 'text-orange-800', hover: 'hover:bg-orange-100' },
    red: { bg: 'bg-red-50', border: 'border-red-200', text: 'text-red-800', hover: 'hover:bg-red-100' },
  };

  const priorities = {
    none: { label: 'なし', color: 'bg-gray-300', textColor: 'text-gray-600', icon: Circle },
    high: { label: '高', color: 'bg-red-500', textColor: 'text-red-700', icon: AlertCircle },
    medium: { label: '中', color: 'bg-yellow-500', textColor: 'text-yellow-700', icon: Circle },
    low: { label: '低', color: 'bg-gray-500', textColor: 'text-gray-700', icon: Minus },
  };

  const addTask = (taskData) => {
    const newTask = {
      id: Date.now(),
      text: taskData.text || '',
      color: taskData.color || 'blue',
      priority: taskData.priority || 'none',
      estimatedTime: taskData.estimatedTime === 0 ? 0 : (Number(taskData.estimatedTime) || 0),
      startTime: taskData.startTime || '',
      endTime: taskData.endTime || '',
      points: Array.isArray(taskData.points) ? taskData.points : [],
      description: taskData.description || '',
      completed: false,
      subtasks: [],
      isExpanded: true,
      createdAt: new Date().toISOString(),
    };
    setTasks(prev => [...prev, newTask]);
    setShowAddForm(false);
  };

  const addSubtask = (parentId, subtaskText) => {
    if (!subtaskText.trim()) return;
    
    const newSubtask = {
      id: Date.now(),
      text: subtaskText,
      completed: false,
      color: 'blue',
      priority: 'none',
      estimatedTime: 0,
      startTime: '',
      endTime: '',
      points: [],
      description: '',
      subtasks: [],
      isExpanded: true,
      createdAt: new Date().toISOString(),
    };

    const updateTasks = (taskList) => {
      return taskList.map(task => {
        if (task.id === parentId) {
          return { ...task, subtasks: [...(task.subtasks || []), newSubtask] };
        }
        if (task.subtasks && task.subtasks.length > 0) {
          return { ...task, subtasks: updateTasks(task.subtasks) };
        }
        return task;
      });
    };

    setTasks(updateTasks(tasks));
  };

  const deleteTask = (taskId) => {
    const filterTasks = (taskList) => {
      return taskList.filter(task => task.id !== taskId).map(task => ({
        ...task,
        subtasks: task.subtasks ? filterTasks(task.subtasks) : []
      }));
    };
    setTasks(filterTasks(tasks));
  };

  const toggleTask = (taskId) => {
    const updateTasks = (taskList) => {
      return taskList.map(task => {
        if (task.id === taskId) {
          const updatedTask = { ...task, completed: !task.completed };
          if (updatedTask.completed) {
            updatedTask.completedAt = new Date().toISOString();
          } else {
            delete updatedTask.completedAt;
          }
          return updatedTask;
        }
        if (task.subtasks && task.subtasks.length > 0) {
          return { ...task, subtasks: updateTasks(task.subtasks) };
        }
        return task;
      });
    };
    setTasks(updateTasks(tasks));
  };

  const toggleExpanded = (taskId) => {
    const updateTasks = (taskList) => {
      return taskList.map(task => {
        if (task.id === taskId) {
          return { ...task, isExpanded: !task.isExpanded };
        }
        if (task.subtasks && task.subtasks.length > 0) {
          return { ...task, subtasks: updateTasks(task.subtasks) };
        }
        return task;
      });
    };
    setTasks(updateTasks(tasks));
  };

  const updateTask = (taskId, newData) => {
    const updateTasks = (taskList) => {
      return taskList.map(task => {
        if (task.id === taskId) {
          return { 
            ...task, 
            text: newData.text || task.text || '',
            color: newData.color || task.color || 'blue',
            priority: newData.priority || task.priority || 'none',
            estimatedTime: newData.estimatedTime !== undefined ? Number(newData.estimatedTime) : (Number(task.estimatedTime) || 0),
            points: Array.isArray(newData.points) ? newData.points : (Array.isArray(task.points) ? task.points : []),
            description: newData.description !== undefined ? newData.description : (task.description || ''),
            startTime: newData.startTime !== undefined ? newData.startTime : (task.startTime || ''),
            endTime: newData.endTime !== undefined ? newData.endTime : (task.endTime || '')
          };
        }
        if (task.subtasks && task.subtasks.length > 0) {
          return { ...task, subtasks: updateTasks(task.subtasks) };
        }
        return task;
      });
    };
    setTasks(updateTasks(tasks));
    setEditingTask(null);
  };

  const moveTask = (taskId, direction) => {
    const moveInArray = (arr, fromIndex, toIndex) => {
      const newArr = [...arr];
      const item = newArr.splice(fromIndex, 1)[0];
      newArr.splice(toIndex, 0, item);
      return newArr;
    };

    const moveTaskInList = (taskList) => {
      const index = taskList.findIndex(task => task.id === taskId);
      if (index === -1) {
        return taskList.map(task => ({
          ...task,
          subtasks: task.subtasks ? moveTaskInList(task.subtasks) : []
        }));
      }

      const newIndex = direction === 'up' ? index - 1 : index + 1;
      if (newIndex < 0 || newIndex >= taskList.length) return taskList;

      return moveInArray(taskList, index, newIndex);
    };

    setTasks(moveTaskInList(tasks));
  };

  const duplicateTask = (taskId) => {
    const duplicateTaskRecursive = (task) => ({
      ...task,
      id: Date.now() + Math.random(),
      completed: false,
      createdAt: new Date().toISOString(),
      subtasks: task.subtasks ? task.subtasks.map(duplicateTaskRecursive) : []
    });

    const findAndDuplicate = (taskList) => {
      const result = [];
      for (const task of taskList) {
        result.push(task);
        if (task.id === taskId) {
          result.push(duplicateTaskRecursive(task));
        } else if (task.subtasks && task.subtasks.length > 0) {
          result[result.length - 1] = {
            ...task,
            subtasks: findAndDuplicate(task.subtasks)
          };
        }
      }
      return result;
    };

    setTasks(findAndDuplicate(tasks));
  };

  const getTaskStats = () => {
    const flattenTasks = (taskList) => {
      let result = [];
      for (const task of taskList) {
        result.push(task);
        if (task.subtasks && task.subtasks.length > 0) {
          result = result.concat(flattenTasks(task.subtasks));
        }
      }
      return result;
    };

    const allTasks = flattenTasks(tasks);
    const completed = allTasks.filter(task => task.completed).length;
    const total = allTasks.length;
    const progress = total > 0 ? Math.round((completed / total) * 100) : 0;
    const totalEstimatedTime = allTasks.reduce((sum, task) => sum + (Number(task.estimatedTime) || 0), 0);
    const completedEstimatedTime = allTasks.filter(task => task.completed).reduce((sum, task) => sum + (Number(task.estimatedTime) || 0), 0);

    return { completed, total, progress, totalEstimatedTime, completedEstimatedTime };
  };

  const filterTasks = (taskList) => {
    return taskList.filter(task => {
      const taskText = task.text || '';
      const taskDescription = task.description || '';
      const matchesSearch = taskText.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           taskDescription.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = filterStatus === 'all' || 
                           (filterStatus === 'completed' && task.completed) ||
                           (filterStatus === 'pending' && !task.completed);
      const matchesColor = filterColor === 'all' || (task.color || 'blue') === filterColor;
      const matchesPriority = filterPriority === 'all' || (task.priority || 'none') === filterPriority;
      
      return matchesSearch && matchesStatus && matchesColor && matchesPriority;
    }).map(task => ({
      ...task,
      subtasks: task.subtasks ? filterTasks(task.subtasks) : []
    }));
  };

  const sortTasksByPriority = (taskList) => {
    const priorityOrder = { high: 4, medium: 3, low: 2, none: 1 };
    return [...taskList].sort((a, b) => {
      if (a.completed !== b.completed) {
        return a.completed ? 1 : -1;
      }
      const aPriority = a.priority || 'none';
      const bPriority = b.priority || 'none';
      return priorityOrder[bPriority] - priorityOrder[aPriority];
    }).map(task => ({
      ...task,
      subtasks: task.subtasks ? sortTasksByPriority(task.subtasks) : []
    }));
  };

  const formatTime = (minutes) => {
    const mins = Number(minutes) || 0;
    if (mins === 0) {
      return '未設定';
    }
    if (mins < 60) {
      return `${mins}分`;
    }
    const hours = Math.floor(mins / 60);
    const remainingMinutes = mins % 60;
    return remainingMinutes > 0 ? `${hours}時間${remainingMinutes}分` : `${hours}時間`;
  };

  const TaskForm = ({ onSubmit, onCancel, initialData = {}, buttonText = '追加' }) => {
    const [formData, setFormData] = useState({
      text: initialData.text || '',
      color: initialData.color || 'blue',
      priority: initialData.priority || 'none',
      estimatedTime: Number(initialData.estimatedTime) || 0,
      startTime: initialData.startTime || '',
      endTime: initialData.endTime || '',
      points: Array.isArray(initialData.points) ? initialData.points.join(' ') : '',
      description: initialData.description || '',
    });

    const handleSubmit = () => {
      if (!formData.text.trim()) return;
      const pointsArray = formData.points.trim() ? 
        formData.points.split(/\s+/).map(p => p.trim()).filter(p => p) : [];
      onSubmit({
        ...formData,
        points: pointsArray,
        estimatedTime: Number(formData.estimatedTime) || 0
      });
    };

    return (
      <div className="bg-white border rounded-lg shadow-sm p-3 sm:p-4 space-y-3 sm:space-y-4">
        <div className="space-y-3">
          <input
            type="text"
            value={formData.text}
            onChange={(e) => setFormData({ ...formData, text: e.target.value })}
            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
            placeholder="タスク名を入力..."
            autoFocus
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit();
              }
            }}
          />
          
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-3">
            <select
              value={formData.color}
              onChange={(e) => setFormData({ ...formData, color: e.target.value })}
              className="p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
            >
              <option value="blue">青</option>
              <option value="green">緑</option>
              <option value="purple">紫</option>
              <option value="pink">ピンク</option>
              <option value="orange">オレンジ</option>
              <option value="red">赤</option>
            </select>
            
            <select
              value={formData.priority}
              onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
              className="p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
            >
              <option value="none">優先度: なし</option>
              <option value="high">優先度: 高</option>
              <option value="medium">優先度: 中</option>
              <option value="low">優先度: 低</option>
            </select>
            
            <select
              value={formData.estimatedTime}
              onChange={(e) => setFormData({ ...formData, estimatedTime: Number(e.target.value) || 0 })}
              className="p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
            >
              <option value={0}>時間: 未設定</option>
              {Array.from({ length: 60 }, (_, i) => i + 1).map(minutes => (
                <option key={minutes} value={minutes}>
                  {minutes < 60 ? `${minutes}分` : `${Math.floor(minutes / 60)}時間${minutes % 60 > 0 ? `${minutes % 60}分` : ''}`}
                </option>
              ))}
            </select>
            
            <div className="flex space-x-1">
              <input
                type="time"
                value={formData.startTime}
                onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}
                className="flex-1 p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
              />
              <input
                type="time"
                value={formData.endTime}
                onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}
                className="flex-1 p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
              />
            </div>
          </div>
          
          <input
            type="text"
            value={formData.points}
            onChange={(e) => setFormData({ ...formData, points: e.target.value })}
            className="w-full p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base sm:text-sm"
            placeholder="ポイント（スペース区切り）"
          />
          
          <textarea
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            className="w-full p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 h-20 resize-none text-base sm:text-sm"
            placeholder="説明文"
          />
        </div>
        
        <div className="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2">
          <button
            onClick={handleSubmit}
            className="px-4 py-3 sm:py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 font-medium transition-colors touch-manipulation"
          >
            {buttonText}
          </button>
          <button
            onClick={onCancel}
            className="px-4 py-3 sm:py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium transition-colors touch-manipulation"
          >
            キャンセル
          </button>
        </div>
      </div>
    );
  };

  const TaskItem = ({ task, depth = 0, taskList, taskIndex }) => {
    const [showSubtaskInput, setShowSubtaskInput] = useState(false);
    const [subtaskText, setSubtaskText] = useState('');
    
    const colorTheme = colors[task.color || 'blue'] || colors.blue;
    const priorityConfig = priorities[task.priority || 'none'] || priorities.none;
    const PriorityIcon = priorityConfig.icon;
    const isEditing = editingTask === task.id;

    if (isEditing) {
      return (
        <div className="mb-3" style={{ marginLeft: `${depth * 20}px` }}>
          <TaskForm
            onSubmit={(data) => updateTask(task.id, data)}
            onCancel={() => setEditingTask(null)}
            initialData={task}
            buttonText="保存"
          />
        </div>
      );
    }

    return (
      <div className={`${colorTheme.bg} ${colorTheme.border} border rounded-lg mb-2 sm:mb-3 transition-all duration-200 ${colorTheme.hover}`} style={{ marginLeft: `${depth * 10}px` }}>
        <div className="p-2 sm:p-3">
          <div className="flex items-start justify-between">
            <div className="flex items-start space-x-2 sm:space-x-3 flex-1 min-w-0">
              {task.subtasks && task.subtasks.length > 0 ? (
                <button
                  onClick={() => toggleExpanded(task.id)}
                  className="p-1 hover:bg-white rounded transition-colors mt-0.5 flex-shrink-0 touch-manipulation"
                  title={task.isExpanded ? '折りたたむ' : '展開する'}
                >
                  {task.isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                </button>
              ) : null}
              
              <input
                type="checkbox"
                checked={task.completed || false}
                onChange={() => toggleTask(task.id)}
                className="w-5 h-5 sm:w-4 sm:h-4 text-blue-600 rounded mt-1 flex-shrink-0"
              />
              
              <div className="flex-1 min-w-0">
                <div className="flex flex-wrap items-start gap-1 sm:gap-2 mb-1">
                  {task.priority && task.priority !== 'none' ? (
                    <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${priorityConfig.color} text-white`}>
                      <PriorityIcon size={10} />
                      <span>{priorityConfig.label}</span>
                    </div>
                  ) : null}
                  {task.estimatedTime && task.estimatedTime > 0 ? (
                    <div className="bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium">
                      {formatTime(task.estimatedTime)}
                    </div>
                  ) : null}
                </div>
                
                <div className={`${task.completed ? 'line-through text-gray-500' : colorTheme.text} ${fontSizes[fontSize].task} font-medium leading-tight break-words mb-1`}>
                  {task.text}
                </div>
                
                <div className="flex flex-wrap items-center gap-x-3 gap-y-1 sm:gap-x-4 sm:gap-y-2">
                  {(task.startTime || task.endTime) && (
                    <div className="flex items-center space-x-1">
                      <Clock size={12} className="text-gray-500" />
                      <span className={`${fontSizes[fontSize].meta} text-gray-600`}>
                        {task.startTime && task.endTime ? `${task.startTime} - ${task.endTime}` :
                         task.startTime ? `${task.startTime}〜` : `〜${task.endTime}`}
                      </span>
                    </div>
                  )}
                  
                  {task.points && Array.isArray(task.points) && task.points.length > 0 ? (
                    <div className="flex flex-wrap gap-1">
                      {task.points.map((point, index) => (
                        <span key={index} className={`${fontSizes[fontSize].meta} text-purple-600 bg-purple-100 px-2 py-1 rounded-full`}>
                          {point}
                        </span>
                      ))}
                    </div>
                  ) : null}
                  
                  {task.description ? (
                    <div className="flex items-center space-x-1">
                      <FileText size={10} className="text-gray-400" />
                      <span className={`${fontSizes[fontSize].meta} text-gray-500`}>説明</span>
                    </div>
                  ) : null}

                  {task.completedAt ? (
                    <div className="flex items-center space-x-1">
                      <Calendar size={10} className="text-green-400" />
                      <span className={`${fontSizes[fontSize].meta} text-green-600`}>
                        完了: {new Date(task.completedAt).toLocaleDateString()}
                      </span>
                    </div>
                  ) : null}
                </div>
                
                {task.description ? (
                  <div className={`mt-2 ${fontSizes[fontSize].content} text-gray-600 bg-gray-50 p-2 rounded leading-relaxed`}>
                    {task.description}
                  </div>
                ) : null}
              </div>
            </div>
            
            <div className="flex items-center space-x-0.5 sm:space-x-1 ml-2 sm:ml-3 flex-shrink-0">
              <button
                onClick={() => moveTask(task.id, 'up')}
                className="p-2 sm:p-1 text-gray-600 hover:bg-gray-100 rounded transition-colors touch-manipulation"
                disabled={taskIndex === 0}
                title="上に移動"
              >
                <ArrowUp size={14} />
              </button>
              <button
                onClick={() => moveTask(task.id, 'down')}
                className="p-2 sm:p-1 text-gray-600 hover:bg-gray-100 rounded transition-colors touch-manipulation"
                disabled={taskIndex === taskList.length - 1}
                title="下に移動"
              >
                <ArrowDown size={14} />
              </button>
              <button
                onClick={() => duplicateTask(task.id)}
                className="p-2 sm:p-1 text-gray-600 hover:bg-gray-100 rounded transition-colors touch-manipulation"
                title="複製"
              >
                <Move size={14} />
              </button>
              <button
                onClick={() => setEditingTask(task.id)}
                className="p-2 sm:p-1 text-blue-600 hover:bg-blue-100 rounded transition-colors touch-manipulation"
                title="編集"
              >
                <Edit2 size={14} />
              </button>
              <button
                onClick={() => setShowSubtaskInput(!showSubtaskInput)}
                className="p-2 sm:p-1 text-green-600 hover:bg-green-100 rounded transition-colors touch-manipulation"
                title="サブタスク追加"
              >
                <Plus size={14} />
              </button>
              <button
                onClick={() => deleteTask(task.id)}
                className="p-2 sm:p-1 text-red-600 hover:bg-red-100 rounded transition-colors touch-manipulation"
                title="削除"
              >
                <Trash2 size={14} />
              </button>
            </div>
          </div>
          
          {showSubtaskInput && (
            <div className="mt-3 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
              <input
                type="text"
                value={subtaskText}
                onChange={(e) => setSubtaskText(e.target.value)}
                className="flex-1 p-3 sm:p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base sm:text-sm"
                placeholder="サブタスクを入力..."
                autoFocus
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    addSubtask(task.id, subtaskText);
                    setSubtaskText('');
                    setShowSubtaskInput(false);
                  }
                  if (e.key === 'Escape') {
                    setShowSubtaskInput(false);
                    setSubtaskText('');
                  }
                }}
              />
              <button
                onClick={() => {
                  addSubtask(task.id, subtaskText);
                  setSubtaskText('');
                  setShowSubtaskInput(false);
                }}
                className="px-4 py-3 sm:py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors touch-manipulation"
              >
                追加
              </button>
            </div>
          )}
        </div>
        
        {task.subtasks && task.subtasks.length > 0 && task.isExpanded ? (
          <div className="pb-2">
            {task.subtasks.map((subtask, index) => (
              <TaskItem 
                key={subtask.id} 
                task={subtask} 
                depth={depth + 1}
                taskList={task.subtasks}
                taskIndex={index}
              />
            ))}
          </div>
        ) : null}
      </div>
    );
  };

  const stats = getTaskStats();
  const filteredTasks = filterTasks(tasks);
  const displayTasks = sortByPriority ? sortTasksByPriority(filteredTasks) : filteredTasks;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      <div className="bg-white shadow-sm border-b">
        <div className="px-2 sm:px-4 py-2 sm:py-3">
          <div className="flex flex-col space-y-2 sm:space-y-3">
            <div className="flex justify-between items-center">
              <div className="flex items-center space-x-3">
                <h1 className="text-lg sm:text-xl font-bold text-gray-800">業務のフロータスク</h1>
                <select
                  value={currentWorkspace}
                  onChange={(e) => setCurrentWorkspace(e.target.value)}
                  className="px-3 py-1 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm font-medium bg-blue-50 border-blue-200"
                >
                  {Object.entries(workspaces).map(([key, workspace]) => (
                    <option key={key} value={key}>
                      {workspace.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className="flex items-center space-x-1 sm:space-x-2">
                <div className="flex bg-gray-100 rounded-lg p-1">
                  {Object.keys(fontSizes).map(size => (
                    <button
                      key={size}
                      onClick={() => setFontSize(size)}
                      className={`px-2 sm:px-3 py-1 rounded-md text-xs sm:text-sm font-medium transition-colors touch-manipulation ${
                        fontSize === size ? 'bg-white shadow-sm text-blue-600' : 'text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      {size === 'small' ? '小' : size === 'medium' ? '中' : '大'}
                    </button>
                  ))}
                </div>
              </div>
            </div>
            
            <div className="flex flex-col gap-2 sm:gap-3">
              <div className="relative">
                <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  placeholder="タスクを検索..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 sm:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base sm:text-sm"
                />
              </div>
              
              <div className="grid grid-cols-2 sm:grid-cols-5 gap-2 sm:gap-3">
                <select
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value)}
                  className="px-2 sm:px-3 py-3 sm:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                >
                  <option value="all">すべて</option>
                  <option value="pending">未完了</option>
                  <option value="completed">完了</option>
                </select>
                
                <select
                  value={filterPriority}
                  onChange={(e) => setFilterPriority(e.target.value)}
                  className="px-2 sm:px-3 py-3 sm:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                >
                  <option value="all">全優先度</option>
                  <option value="none">優先度なし</option>
                  <option value="high">高優先度</option>
                  <option value="medium">中優先度</option>
                  <option value="low">低優先度</option>
                </select>
                
                <select
                  value={filterColor}
                  onChange={(e) => setFilterColor(e.target.value)}
                  className="px-2 sm:px-3 py-3 sm:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm col-span-2 sm:col-span-2"
                >
                  <option value="all">すべての色</option>
                  <option value="blue">青</option>
                  <option value="green">緑</option>
                  <option value="purple">紫</option>
                  <option value="pink">ピンク</option>
                  <option value="orange">オレンジ</option>
                  <option value="red">赤</option>
                </select>
                
                <div className="col-span-2 sm:col-span-1 flex items-center">
                  <label className="flex items-center space-x-2 text-sm text-gray-600 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={sortByPriority}
                      onChange={(e) => setSortByPriority(e.target.checked)}
                      className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
                    />
                    <span>優先度順</span>
                  </label>
                </div>
              </div>
            </div>
            
            {stats.total > 0 && (
              <div className="space-y-2">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between text-xs sm:text-sm text-gray-600 space-y-1 sm:space-y-0">
                  <span>{workspaces[currentWorkspace]?.name} - 進捗: {stats.completed}/{stats.total} ({stats.progress}%)</span>
                  <span>時間: {formatTime(stats.completedEstimatedTime)}/{formatTime(stats.totalEstimatedTime)}</span>
                </div>
                <div className="bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${stats.progress}%` }}
                  />
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="p-2 sm:p-4 max-w-4xl mx-auto">
        <div className="mb-4 sm:mb-6">
          {showAddForm ? (
            <TaskForm
              onSubmit={addTask}
              onCancel={() => setShowAddForm(false)}
            />
          ) : (
            <button
              onClick={() => setShowAddForm(true)}
              className="w-full p-4 bg-white border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors text-gray-600 font-medium flex items-center justify-center space-x-2 touch-manipulation text-base"
            >
              <Plus size={20} />
              <span>新しいタスクを追加</span>
            </button>
          )}
        </div>

        <div>
          {displayTasks.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              {tasks.length === 0 ? (
                <>
                  <p className="text-lg">{workspaces[currentWorkspace]?.name}にはまだタスクがありません</p>
                  <p className="text-sm mt-2">上のボタンから新しいタスクを追加してください</p>
                </>
              ) : (
                <>
                  <p className="text-lg">検索条件に該当するタスクがありません</p>
                  <p className="text-sm mt-2">検索条件を変更してみてください</p>
                </>
              )}
            </div>
          ) : (
            displayTasks.map((task, index) => (
              <TaskItem 
                key={task.id} 
                task={task} 
                taskList={displayTasks}
                taskIndex={index}
              />
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default HierarchicalTaskManager;
